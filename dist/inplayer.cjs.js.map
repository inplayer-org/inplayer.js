{"version":3,"file":"inplayer.cjs.js","sources":["../src/Models/User.js","../src/Models/Asset.js","../src/Models/Payment.js","../src/Models/Subscriptions.js","../src/Models/Misc.js"],"sourcesContent":["import * as Cookies from 'js-cookie';\r\n\r\nimport {\r\n  API\r\n} from '../../constants/endpoints';\r\n\r\nimport { config } from '../../config';\r\n\r\n/**\r\n * Contains all Requests regarding user/account and authentication\r\n *\r\n * @class User\r\n */\r\nclass User {\r\n\r\n  /**\r\n   * Signs in the user\r\n   * @method signIn\r\n   * @async\r\n   * @param {Object} data - Contains {\r\n   *  email: string,\r\n   *  password: string,\r\n   *  merchant_uuid: string,\r\n   *  referrer: string,\r\n   * }\r\n   * @example\r\n   * InPlayer.User.signIn({\r\n   *  email: 'test@test.com',\r\n   *  password: 'test123',\r\n   *  merchant_uuid: '123-123-hf1hd1-12dhd1',\r\n   *  referrer: 'http://localhost.com'\r\n   * })\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async signIn(data){\r\n    // Add into form data\r\n    const fd = new FormData();\r\n    fd.append('email', data.email);\r\n    fd.append('password', data.password);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n    fd.append('referrer', data.referrer);\r\n    // request\r\n    try{\r\n      const response = await fetch(API.signIn, {\r\n        method: 'POST',\r\n        body: fd,\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      /* set cookies */\r\n      if(data.access_token){\r\n        Cookies.set(config.INPLAYER_TOKEN_NAME, data.access_token);\r\n      }\r\n\r\n      return data;\r\n\r\n    } catch(error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Signs out the user and destroys cookies\r\n   * @method signOut\r\n   * @async\r\n   * @example\r\n   * InPlayer.User.signOut()\r\n   * .then(data => console.log(data));\r\n   * @return {Boolean}\r\n  */\r\n  async signOut(){\r\n    const token = Cookies.get(config.INPLAYER_TOKEN_NAME);\r\n\r\n    try{\r\n      const response = await fetch(API.signOut, {\r\n          headers: {\r\n              'Authorization': 'Bearer ' + token\r\n          }\r\n      });\r\n\r\n      const data = await response.json();\r\n      // if response is okay\r\n      if(data.explain){\r\n        Cookies.remove(config.INPLAYER_TOKEN_NAME);\r\n      }\r\n      return true;\r\n\r\n    } catch(error){\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Signs up/Registers user\r\n   * @method signUp\r\n   * @async\r\n   * @param {Object} data - Contains {\r\n   *  full_name: string,\r\n   *  email: string\r\n   *  password: string,\r\n   *  password_confirmation: string,\r\n   *  merchant_uuid: string,\r\n   *  type: number\r\n   *  referrer: string,\r\n   * }\r\n   * @example\r\n   * InPlayer.User.signUp({\r\n   *  full_name: \"test\",\r\n   *  email: \"test32@test.com\",\r\n   *  password: \"12345678\",\r\n   *  password_confirmation: \"12345678\",\r\n   *  merchant_uuid: \"528b1b80-5868-4abc-a9b6-4d3455d719c8\",\r\n   *  type: \"consumer\",\r\n   *  referrer: \"http://localhost:3000/\",\r\n   * })\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async signUp(data) {\r\n\r\n    // Add into form data\r\n    const fd = new FormData();\r\n    fd.append('full_name', data.full_name);\r\n    fd.append('email', data.email);\r\n    fd.append('password', data.password);\r\n    fd.append('password_confirmation', data.password_confirmation);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n    fd.append('type', data.type);\r\n    fd.append('referrer', data.referrer);\r\n\r\n    try{\r\n      const response = await fetch(API.signUp, {\r\n        method: 'POST',\r\n        body: fd,\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n\r\n    }catch(error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if user is signed in\r\n   * @method isSignedIn\r\n   * @example\r\n   * InPlayer.User.isSignedIn()\r\n   * @return {Boolean}\r\n  */\r\n  isSignedIn(){\r\n    return Cookies.get(config.INPLAYER_TOKEN_NAME) !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns users Auth token\r\n   * @method token\r\n   * @example\r\n   * InPlayer.User.token()\r\n   * @return {String}\r\n  */\r\n  token(){\r\n    return Cookies.get(config.INPLAYER_TOKEN_NAME);\r\n  }\r\n\r\n  /**\r\n   * Sets Auth token into cookies\r\n   * @method token\r\n   * @param {String} token - The Authorization token which needs to be set\r\n   * @example\r\n   * InPlayer.User.setTokenInCookie('aed1g284i3dnfrfnd1o23rtegk')\r\n   * @return {void}\r\n  */\r\n  setTokenInCookie(token){\r\n    Cookies.set(config.INPLAYER_TOKEN_NAME, token);\r\n  }\r\n\r\n  /**\r\n   * Requests new password for a given user\r\n   * @method signUp\r\n   * @async\r\n   * @param {Object} data - Contains {\r\n   *  email: String,\r\n   *  merchant_uuid: string\r\n   * }\r\n   * @example\r\n   * InPlayer.User.requestNewPassword({\r\n   *  email: \"test32@test.com\",\r\n   *  merchant_uuid: \"528b1b80-5868-4abc-a9b6-4d3455d719c8\",\r\n   * })\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async requestNewPassword(data) {\r\n\r\n    // Add into from FormData\r\n    const fd = new FormData();\r\n    fd.append('email', data.email);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n\r\n    try {\r\n      const response = await fetch(API.requestNewPassword, {\r\n          method: 'POST',\r\n          body: fd\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Sets new password for the user\r\n   * @method setNewPassword\r\n   * @async\r\n   * @param {Object} data - Contains {\r\n   *  password: string\r\n   *  password_confirmation: string\r\n   * }\r\n   * @param {String} token - The authorization token\r\n   * @example\r\n   * InPlayer.User.setNewPassword({\r\n   *  password: \"12345\",\r\n   *  password_confirmation: \"12345\",\r\n   * }, 'afhqi83rji74hjf7e43df')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async setNewPassword(data, token) {\r\n\r\n        const body = `password=${data.password}&password_confirmation=${data.password_confirmation}`;\r\n\r\n        try{\r\n          const response = await fetch(API.setNewPassword(token),{\r\n            method: 'PUT',\r\n            body: body,\r\n            headers: {\r\n              'Content-Type': 'x-www-form-urlencoded'\r\n            }\r\n          });\r\n\r\n          const data = await response.json();\r\n\r\n          return data;\r\n\r\n        }catch(error){\r\n          return false;\r\n        }\r\n  }\r\n\r\n  /**\r\n   * Gets the user/account information for a given auth token\r\n   * @method getAccountInfo\r\n   * @async\r\n   * @param {String} token - The authorization token\r\n   * @example\r\n   * InPlayer.User.getAccountInfo('afhqi83rji74hjf7e43df')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getAccountInfo(token) {\r\n    try{\r\n      const response = await fetch(API.getAccountInfo, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      if(data)\r\n        return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the social login urls for fb/twitter/google\r\n   * @method getSocialLoginUrls\r\n   * @async\r\n   * @param {String} state - The state for the social\r\n   * @example\r\n   * InPlayer.User.getSocialLoginUrls('123124-1r-1r13ur1h1')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getSocialLoginUrls(state) {\r\n    try{\r\n      const response = await fetch(API.social(state), {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if(data)\r\n        return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the account info\r\n   * @method updateAccount\r\n   * @async\r\n   * @param {Object} data - The new data for the account\r\n   * @param {String} token - The authorization token\r\n   * @example\r\n   * InPlayer.User.updateAccount({},'123124-1r-1r13ur1h1')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async updateAccount(data, token) {\r\n    try{\r\n      const response = await fetch(API.updateAccount, {\r\n        method: 'PUT',\r\n        body: data,\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token,\r\n          'Content-Type': 'x-www-form-urlencoded'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Changes password for a given user\r\n   * @method changePassword\r\n   * @async\r\n   * @param {Object} data - Contains new password\r\n   * @param {String} token - The authorization token\r\n   * @example\r\n   * InPlayer.User.updateAccount({},'123124-1r-1r13ur1h1')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async changePassword(data, token) {\r\n    try{\r\n      const response = await fetch(API.changePassword, {\r\n        method: 'POST',\r\n        body: data,\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets register fields\r\n   * @method getRegisterFields\r\n   * @async\r\n   * @param {String} merchant_uuid - The merchant UUID\r\n   * @example\r\n   * InPlayer.User.getRegisterFields('123124-1r-1r13ur1h1')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getRegisterFields(merchant_uuid){\r\n    try{\r\n      const response = await fetch(API.getRegisterFields(merchant_uuid));\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import {\r\n  API\r\n} from '../../constants/endpoints';\r\n\r\n/**\r\n * Contains all Requests connected with assets/items\r\n *\r\n * @class Asset\r\n */\r\nclass Asset {\r\n\r\n  /**\r\n   * Checks whether a given authenticated user has access for an asset\r\n   * @method checkAccessForAsset\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {Number} id - The id of the asset\r\n   * @example\r\n   * InPlayer.Asset.checkAccessForAsset('eyJ0eXAiOiJKPECENR5Y',36320)\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async checkAccessForAsset(token, id){\r\n    try{\r\n      const response = await fetch(API.checkAccess(id), {\r\n          headers: {\r\n              'Authorization': 'Bearer ' + token\r\n          }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n\r\n    } catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether a given authenticated user has access for an array of assets\r\n   * @method checkAccessForMultipleAssets\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {Array} ids - Array with asset ids\r\n   * @example\r\n   * InPlayer.Asset.checkAccessForMultipleAssets('eyJ0eXAiOiJKPECENR5Y',[36320,27215])\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async checkAccessForMultipleAssets(token, ids){\r\n    try{\r\n      const response = await fetch(API.checkAccess(ids, true), {\r\n          headers: {\r\n              'Authorization': 'Bearer ' + token\r\n          }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the asset info for a given asset ID and merchant UUID\r\n   * @method findAsset\r\n   * @async\r\n   * @param {Numer} assetId - The ID of the asset\r\n   * @param {String} merchant_uuid - The merchant UUID string\r\n   * @example\r\n   * InPlayer.Asset.findAsset(2,'a1f13-dd1dfh-rfh123-dhd1hd-fahh1dl')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async findAsset(assetId, merchant_uuid){\r\n    try{\r\n      const response = await fetch(API.findAsset(assetId,merchant_uuid),{\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an external assets' info\r\n   * @method findExternalAsset\r\n   * @async\r\n   * @param {Numer} assetType - The type ID of the asset\r\n   * @param {Number} externalId - The ID of the external asset\r\n   * @example\r\n   * InPlayer.Asset.findExternalAsset(2,44237)\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async findExternalAsset(assetType, externalId){\r\n    try{\r\n      const response = await fetch(API.findExternalAsset(assetType, externalId),{\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get package info for a given Package ID\r\n   * @method findPackage\r\n   * @async\r\n   * @param {Numer} id - The type ID of the package\r\n   * @example\r\n   * InPlayer.Asset.findPackage(4444)\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async findPackage(id){\r\n    try{\r\n      const response = await fetch(API.findPackage(id), {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the access fees for a given asset ID\r\n   * @method getAssetAccessFees\r\n   * @async\r\n   * @param {Numer} id - The ID of the asset\r\n   * @example\r\n   * InPlayer.Asset.getAssetAccessFees(555)\r\n   * .then(data => console.log(data))\r\n   * @return {Object}\r\n  */\r\n  async getAssetAccessFees(id) {\r\n    try{\r\n      const response = await fetch(API.findAccessFees(id), {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the freemium asset data\r\n   * @method getAssetAccessFees\r\n   * @async\r\n   * @param {String} token - The authorization token\r\n   * @param {Object} data - {}\r\n   * @example\r\n   * InPlayer.Asset.freemiumAsset('uoifhadafefbad1312nfuqd123', {})\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async freemiumAsset(token, data) {\r\n    try{\r\n      const response = await fetch(API.freemium, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        },\r\n        body: data\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default Asset;\r\n","import {\r\n  API\r\n} from '../../constants/endpoints';\r\n\r\n/**\r\n * Contains all Requests connected with payments\r\n *\r\n * @class Payment\r\n */\r\nclass Payment {\r\n\r\n  /**\r\n   * Get all payment methods for a User\r\n   * @method getPaymentMethods\r\n   * @async\r\n   * @param {String} token - The Autorization token\r\n   * @example\r\n   * InPlayer.Payment.getPaymentMethods('aehfawfeikuehdjkc482rijfg47idqwk3n4')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getPaymentMethods(token){\r\n    try{\r\n      const response = await fetch(API.getPaymentMethods,{\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the payment tools for an aothorization token and payment method ID\r\n   * @method getPaymentTools\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {Number} paymentMethodId - The Payment Method ID\r\n   * @example\r\n   * InPlayer.Payment.getPaymentTools('dajh8ao8djadd2o8jh2ofkhdhqkgog3oj', 2)\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getPaymentTools(token, paymentMethodId){\r\n    try{\r\n      const response = await fetch(API.getPaymentTools(paymentMethodId), {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Makes a Payment for a given Authorization token + asset/payment details\r\n   * @method payForAsset\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {Object} data - Payment data\r\n   * @example\r\n   * // data.payment_method = { id.... }\r\n   * InPlayer.Payment.getPaymentTools('dajh8ao8djadd2o8jh2ofkhdhqkgog3oj', {\r\n   *  number: 4111111111111111,\r\n   *  card_name: 'PayPal',\r\n   *  exp_month: 10,\r\n   *  exp_year: 2030,\r\n   *  cvv: 656,\r\n   *  access_fee: 2341,\r\n   *  payment_method: 1,\r\n   *  referrer: 'http://google.com'\r\n   * })\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async payForAsset(token, data) {\r\n    try{\r\n      const response = await fetch(API.payForAsset,{\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        },\r\n        body: data\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets parameters for PayPal\r\n   * @method getPayPalParams\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {Object} data - Contains details\r\n   * @example\r\n   * InPlayer.Payment.getPayPalParams('dajh8ao8djadd2o8jh2ofkhdhqkgog3oj', {})\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getPayPalParams(token, data) {\r\n    try{\r\n      const response = await fetch(API.externalPayments,{\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        },\r\n        body: data\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Payment;\r\n","import {\r\n  API\r\n} from '../../constants/endpoints';\r\n\r\n/**\r\n * Contains all Requests connected with subscriptions\r\n *\r\n * @class Payment\r\n */\r\nclass Subscriptions {\r\n\r\n  /**\r\n   * Gets all subscriptions for a given user\r\n   * @method getSubscriptions\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @example\r\n   * InPlayer.Subscriptions.getSubscriptions('eyJ0eXAiOiJKPECENR5Y')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getSubscriptions(token){\r\n    try{\r\n      const response = await fetch(API.getSubscriptions,{\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels a subscription\r\n   * @method cancelSubscription\r\n   * @async\r\n   * @param {String} unsubscribe_url - The url for the subscription which is getting unsubscribed\r\n   * @param {String} token - The Authorization token\r\n   * @example\r\n   * InPlayer.Subscriptions.cancelSubscription('http://localhost/subscription/1','eyJ0eXAiOiJKPECENR5Y')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async cancelSubscription(unsubscribe_url, token){\r\n    try{\r\n      const response = await fetch(unsubscribe_url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribes to a given asset\r\n   * @method assetSubscribe\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {Object} data - {}\r\n   * @example\r\n   * InPlayer.Subscriptions.assetSubscribe('eyJ0eXAiOiJKPECENR5Y', {})\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async assetSubscribe(token, data) {\r\n    try{\r\n      const response = await fetch(API.subscribe, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        },\r\n        body: data\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Subscriptions;\r\n","import {\r\n  API\r\n} from '../../constants/endpoints';\r\n\r\n/**\r\n * Contains mixed various types of functiosn for dlcs, discounts, branding, etc.\r\n *\r\n * @class Misc\r\n */\r\nclass Misc{\r\n\r\n  /**\r\n   * Gets all DLC links\r\n   * @method getDlcLinks\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {Number} assetId - The id of the asset\r\n   * @example\r\n   * InPlayer.Misc.getDlcLinks('eyJ0eXAiOiJKPECENR5Y',36320)\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getDlcLinks(token,assetId){\r\n    try{\r\n      const response = await fetch(API.getDlcLinks(assetId), {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the discount for a given ..\r\n   * @method getDiscount\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {Object} data - {}\r\n   * @example\r\n   * InPlayer.Misc.getDiscount('eyJ0eXAiOiJKPECENR5Y',{})\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getDiscount(token, data) {\r\n    try{\r\n      const response = await fetch(API.getDiscount, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        },\r\n        body: data\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets branding for given merchant\r\n   * @method getBranding\r\n   * @async\r\n   * @param {String} merchant_uuid - The UUID of the merchant\r\n   * @example\r\n   * InPlayer.Misc.getBranding('eyJ0e-XAiOi-JKPEC-ENR5Y')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async getBranding(merchant_uuid) {\r\n    try{\r\n      const response = await fetch(API.getBranding(merchant_uuid), {\r\n        method: 'GET'\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads a file\r\n   * @method downloadProtectedFile\r\n   * @async\r\n   * @param {String} token - The Authorization token\r\n   * @param {number} assetId - The Id of the asset\r\n   * @param {String} filename - The name of the file\r\n   * @example\r\n   * InPlayer.Misc.downloadProtectedFile('eyJ0eXAiOiJKPECENR5Y',2234, 'test.js')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async downloadProtectedFile(token, assetId, filename) {\r\n    try{\r\n      const response = await fetch(API.downloadFile(assetId, filename), {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches WP content\r\n   * @method fetchWPContent\r\n   * @async\r\n   * @param {String} url - The url from where to fetch\r\n   * @example\r\n   * InPlayer.Misc.fetchWPContent('http://localhost:3000')\r\n   * .then(data => console.log(data));\r\n   * @return {Object}\r\n  */\r\n  async fetchWPContent(url) {\r\n    try{\r\n      const response = await fetch(url, {\r\n        credentials: 'same-origin'\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Misc;\r\n"],"names":["signOut","signUp","requestNewPassword","setNewPassword","getAccountInfo","getSocialLoginUrls","updateAccount","changePassword","getRegisterFields","checkAccessForMultipleAssets","findAsset","findExternalAsset","findPackage","getAssetAccessFees","freemiumAsset","getPaymentTools","payForAsset","getPayPalParams","cancelSubscription","assetSubscribe","getDiscount","getBranding","downloadProtectedFile","fetchWPContent"],"mappings":"uqFAwEEA,mRAiDAC,6qBA6EAC,4QAwCAC,iTAgCAC,sNA4BAC,iLA2BAC,+PA8BAC,2NA4BAC,0XC7UAC,gNA2BAC,mKAyBAC,mLAwBAC,mKAwBAC,6KAyBAC,mbC/HAC,sMAqCAC,wNA8BAC,gdClEAC,iMA4BAC,gbC5BAC,qNA4BAC,kKA0BAC,0MA0BAC"}