{"version":3,"file":"inplayer.cjs.js","sources":["../src/Models/User.js","../src/Models/Asset.js"],"sourcesContent":["import * as Cookies from 'js-cookie';\r\n\r\nimport {\r\n  API\r\n} from '../../constants/endpoints';\r\n\r\nimport { config } from '../../config';\r\n\r\nclass User {\r\n\r\n  async signIn(data){\r\n    // Add into form data\r\n    const fd = new FormData();\r\n    fd.append('email', data.email);\r\n    fd.append('password', data.password);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n    fd.append('referrer', data.referrer);\r\n    // request\r\n    try{\r\n      const response = await fetch(API.signIn, {\r\n        method: 'POST',\r\n        body: fd,\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      /* set cookies */\r\n      if(data.access_token){\r\n        Cookies.set(config.INPLAYER_TOKEN_NAME, data.access_token);\r\n      }\r\n\r\n      return data;\r\n\r\n    } catch(error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  async signOut(){\r\n    const token = Cookies.get(config.INPLAYER_TOKEN_NAME);\r\n\r\n    try{\r\n      const response = await fetch(API.signOut, {\r\n          headers: {\r\n              'Authorization': 'Bearer ' + token\r\n          }\r\n      });\r\n\r\n      const data = await response.json();\r\n      // if response is okay\r\n      if(data.explain){\r\n        Cookies.remove(config.INPLAYER_TOKEN_NAME);\r\n      }\r\n      return true;\r\n\r\n    } catch(error){\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  async signUp(data) {\r\n\r\n    // Add into form data\r\n    const fd = new FormData();\r\n    fd.append('full_name', data.full_name);\r\n    fd.append('email', data.email);\r\n    fd.append('password', data.password);\r\n    fd.append('password_confirmation', data.password_confirmation);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n    fd.append('type', data.type);\r\n    fd.append('referrer', data.referrer);\r\n\r\n    try{\r\n      const response = await fetch(API.signUp, {\r\n        method: 'POST',\r\n        body: fd,\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n\r\n    }catch(error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async requestNewPassword(data) {\r\n\r\n    // Add into from FormData\r\n    const fd = new FormData();\r\n    fd.append('email', data.email);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n\r\n    try {\r\n      const response = await fetch(API.requestNewPassword, {\r\n          method: 'POST',\r\n          body: fd\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  async setNewPassword(data, token) {\r\n\r\n        const body = `password=${data.password}&password_confirmation=${data.password_confirmation}`;\r\n\r\n        try{\r\n          const response = await fetch(API.setNewPassword(token),{\r\n            method: 'PUT',\r\n            body: body,\r\n            headers: {\r\n              'Content-Type': 'x-www-form-urlencoded'\r\n            }\r\n          });\r\n\r\n          const data = await response.json();\r\n\r\n          return data;\r\n\r\n        }catch(error){\r\n          return false;\r\n        }\r\n  }\r\n\r\n  async getAccountInfo(token) {\r\n    try{\r\n      const response = await fetch(API.getAccountInfo, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      if(data)\r\n        return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getSocialLoginUrls(state) {\r\n    try{\r\n      const response = await fetch(API.social(state), {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if(data)\r\n        return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import {\r\n  API\r\n} from '../../constants/endpoints';\r\n\r\n\r\nclass Asset {\r\n\r\n  /*\r\n   * @desc Checks whether a given authenticated user has access for an asset\r\n   * @param {string} token The Authorization token\r\n   * @param {number} id The id of the asset\r\n   * @example\r\n   * InPlayer.Asset.checkAccessForAsset('eyJ0eXAiOiJKPECENR5Y',36320)\r\n   * .then(data => console.log(data));\r\n   * @return {Boolean}\r\n   */\r\n  async checkAccessForAsset(token, id){\r\n    try{\r\n      const response = await fetch(API.checkAccess(id), {\r\n          headers: {\r\n              'Authorization': 'Bearer ' + token\r\n          }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n\r\n    } catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async checkAccessForMultipleAssets(token, ids){\r\n    try{\r\n      const response = await fetch(API.checkAccess(ids, true), {\r\n          headers: {\r\n              'Authorization': 'Bearer ' + token\r\n          }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getDlcLinks(token,assetId){\r\n    try{\r\n      const response = await fetch(API.getDlcLinks(assetId), {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async findAsset(assetId, merchant_uuid){\r\n    try{\r\n      const response = await fetch(API.findAsset(assetId,merchant_uuid),{\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async findExternalAsset(assetType, externalId){\r\n    try{\r\n      const response = await fetch(API.findExternalAsset(assetType, externalId),{\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async findPackage(id){\r\n    try{\r\n      const response = await fetch(API.findPackage(id), {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getAssetAccessFees(id) {\r\n    try{\r\n      const response = await fetch(API.findAccessFees(id), {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async freemiumAsset(token, data) {\r\n    try{\r\n      const response = await fetch(API.freemium, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        },\r\n        body: data\r\n      })\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Asset;\r\n"],"names":["signOut","signUp","requestNewPassword","setNewPassword","getAccountInfo","getSocialLoginUrls","checkAccessForMultipleAssets","getDlcLinks","findAsset","findExternalAsset","findPackage","getAssetAccessFees","freemiumAsset"],"mappings":"gpDAuCEA,mRAuBAC,waA2BAC,4QAuBAC,iTAsBAC,sNAkBAC,4YCvHAC,gNAgBAC,4LAgBAC,mKAcAC,mLAcAC,mKAcAC,6KAcAC"}