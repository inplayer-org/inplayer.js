{"version":3,"file":"inplayer.cjs.js","sources":["../src/Models/User.js"],"sourcesContent":["import * as Cookies from 'js-cookie';\r\n\r\nimport {\r\n  API\r\n} from '../../constants/endpoints';\r\n\r\nimport { config } from '../../config';\r\n\r\nclass User {\r\n\r\n  /* SIGN IN */\r\n  async signIn(data){\r\n    // Add into form data\r\n    const fd = new FormData();\r\n    fd.append('email', data.email);\r\n    fd.append('password', data.password);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n    fd.append('referrer', data.referrer);\r\n    // request\r\n    try{\r\n      const response = await fetch(API.signIn, {\r\n        method: 'POST',\r\n        body: fd,\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      /* set cookies */\r\n      if(data.access_token){\r\n        Cookies.set(config.INPLAYER_TOKEN_NAME, data.access_token);\r\n      }\r\n\r\n      return data;\r\n\r\n    } catch(error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /* SIGN OUT */\r\n  async signOut(){\r\n    const token = Cookies.get(config.INPLAYER_TOKEN_NAME);\r\n\r\n    try{\r\n      const response = await fetch(API.signOut, {\r\n          headers: {\r\n              'Authorization': 'Bearer ' + token\r\n          }\r\n      });\r\n\r\n      const data = await response.json();\r\n      // if response is okay\r\n      if(data.explain){\r\n        Cookies.remove(config.INPLAYER_TOKEN_NAME);\r\n      }\r\n      return true;\r\n\r\n    } catch(error){\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  /* SIGN UP/Register */\r\n  async signUp(data) {\r\n\r\n    // Add into form data\r\n    const fd = new FormData();\r\n    fd.append('full_name', data.full_name);\r\n    fd.append('email', data.email);\r\n    fd.append('password', data.password);\r\n    fd.append('password_confirmation', data.password_confirmation);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n    fd.append('type', data.type);\r\n    fd.append('referrer', data.referrer);\r\n\r\n    try{\r\n      const response = await fetch(API.signUp, {\r\n        method: 'POST',\r\n        body: fd,\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n\r\n    }catch(error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  /* Request new password */\r\n  async requestNewPassword(data) {\r\n\r\n    // Add into from FormData\r\n    const fd = new FormData();\r\n    fd.append('email', data.email);\r\n    fd.append('merchant_uuid', data.merchant_uuid);\r\n\r\n    try {\r\n      const response = await fetch(API.requestNewPassword, {\r\n          method: 'POST',\r\n          body: fd\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n   /* Set new password */\r\n  async setNewPassword(data, token) {\r\n\r\n        const body = `password=${data.password}&password_confirmation=${data.password_confirmation}`;\r\n\r\n        try{\r\n          const response = await fetch(API.setNewPassword(token),{\r\n            method: 'PUT',\r\n            body: body,\r\n            headers: {\r\n              'Content-Type': 'x-www-form-urlencoded'\r\n            }\r\n          });\r\n\r\n          const data = await response.json();\r\n\r\n          return data;\r\n\r\n        }catch(error){\r\n          return false;\r\n        }\r\n  }\r\n\r\n  /* Account info */\r\n  async getAccountInfo(token) {\r\n    try{\r\n      const response = await fetch(API.getAccountInfo, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': 'Bearer ' + token\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n      if(data)\r\n        return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  /* Social login URLs */\r\n  async getSocialLoginUrls(state) {\r\n    try{\r\n      const response = await fetch(API.social(state), {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if(data)\r\n        return data;\r\n\r\n    }catch(error){\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default User;\r\n"],"names":["signOut","signUp","requestNewPassword","setNewPassword","getAccountInfo","getSocialLoginUrls"],"mappings":"4mCAwCEA,mRAwBAC,waA6BAC,4QAwBAC,iTAuBAC,sNAoBAC"}