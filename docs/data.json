{
    "project": {
        "name": "InPlayer SDK",
        "url": "https://inplayer-org.github.io/inplayer.js/",
        "version": "2.6.10",
        "description": "A Javascript SDK for Inplayer's RESTful API"
    },
    "files": {
        "src/Models/Account.js": {
            "name": "src/Models/Account.js",
            "modules": {},
            "classes": {
                "Account": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Models/Asset.js": {
            "name": "src/Models/Asset.js",
            "modules": {},
            "classes": {
                "Asset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Models/Branding.js": {
            "name": "src/Models/Branding.js",
            "modules": {},
            "classes": {
                "Branding": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Models/Dlc.js": {
            "name": "src/Models/Dlc.js",
            "modules": {},
            "classes": {
                "DLC": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Models/Payment.js": {
            "name": "src/Models/Payment.js",
            "modules": {},
            "classes": {
                "Payment": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Models/Subscription.js": {
            "name": "src/Models/Subscription.js",
            "modules": {},
            "classes": {
                "Subscription": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Models/Voucher.js": {
            "name": "src/Models/Voucher.js",
            "modules": {},
            "classes": {
                "Voucher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/index.js": {
            "name": "src/index.js",
            "modules": {},
            "classes": {
                "InPlayer": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Account": {
            "name": "Account",
            "shortname": "Account",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Models/Account.js",
            "line": 4,
            "description": "Contains all Requests regarding user/account and authentication"
        },
        "Asset": {
            "name": "Asset",
            "shortname": "Asset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Models/Asset.js",
            "line": 5,
            "description": "Contains all Requests connected with assets/items"
        },
        "Branding": {
            "name": "Branding",
            "shortname": "Branding",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Models/Branding.js",
            "line": 3,
            "description": "Contains all Requests regarding branding."
        },
        "DLC": {
            "name": "DLC",
            "shortname": "DLC",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Models/Dlc.js",
            "line": 3,
            "description": "Contains mixed various types of function for dlcs, discounts, branding, etc."
        },
        "Payment": {
            "name": "Payment",
            "shortname": "Payment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Models/Payment.js",
            "line": 3,
            "description": "Contains all Requests connected with payments"
        },
        "Subscription": {
            "name": "Subscription",
            "shortname": "Subscription",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Models/Subscription.js",
            "line": 3,
            "description": "Contains all Requests connected with subscriptions"
        },
        "Voucher": {
            "name": "Voucher",
            "shortname": "Voucher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Models/Voucher.js",
            "line": 3,
            "description": "Contains all Requests regarding vouchers."
        },
        "InPlayer": {
            "name": "InPlayer",
            "shortname": "InPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/index.js",
            "line": 13,
            "description": "Main class. Contains all others methods and websocket subscription"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/Models/Account.js",
            "line": 14,
            "description": "Signs in the user",
            "itemtype": "method",
            "name": "authenticate",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n email: string,\n password: string,\n clientId: string,\n clientSecret: string,\n referrer: string,\n refreshToken: string,\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account.authenticate({\n     email: 'test@test.com',\n     password: 'test123',\n     clientId: '123-123-hf1hd1-12dhd1',\n     referrer: 'http://localhost:3000/',\n     refreshToken: '528b1b80-ddd1hj-4abc-gha3j-111111'\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 78,
            "description": "Signs up/Registers user",
            "itemtype": "method",
            "name": "signUp",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n fullName: string,\n email: string\n password: string,\n passwordConfirmation: string,\n clientId: string,\n type: string,\n referrer: string,\n brandingId?: number,\n metadata?: { [key: string]: string }\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account.signUp({\n     fullName: \"test\",\n     email: \"test32@test.com\",\n     password: \"12345678\",\n     passwordConfirmation: \"12345678\",\n     clientId: \"528b1b80-5868-4abc-a9b6-4d3455d719c8\",\n     type: \"consumer\",\n     referrer: \"http://localhost:3000/\",\n     brandingId?: 12345,\n     metadata : { country: \"Macedonia\" },\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 143,
            "description": "Signs out the user and destroys cookies",
            "itemtype": "method",
            "name": "signOut",
            "async": 1,
            "example": [
                "\n    InPlayer.Account.signOut()\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 174,
            "description": "Checks if the user is authenticated",
            "itemtype": "method",
            "name": "isAuthenticated",
            "example": [
                "\n   InPlayer.Account.isAuthenticated()"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 187,
            "itemtype": "method",
            "name": "getToken",
            "example": [
                "\nInPlayer.Account.getToken()"
            ],
            "return": {
                "description": "",
                "type": "Credentials"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 203,
            "itemtype": "method",
            "name": "setToken",
            "params": [
                {
                    "name": "token",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "refreshToken",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "expiresAt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "example": [
                "\nInPlayer.Account.setToken('344244-242242', '123123121-d1-t1-1ff',1558529593297)"
            ],
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 224,
            "description": "Refreshes the token",
            "itemtype": "method",
            "name": "refreshToken",
            "async": 1,
            "params": [
                {
                    "name": "clientId",
                    "description": "- The merchant's clientId"
                }
            ],
            "example": [
                "\n    InPlayer.Account.refreshToken('123123121-d1-t1-1ff').then(data => console.log(data))"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 269,
            "description": "Reports the generated SSO token to the SSO domain.",
            "params": [
                {
                    "name": "ssoDomain",
                    "description": "- The SSO domain.",
                    "type": "String"
                },
                {
                    "name": "tokenData",
                    "description": "- The token data.",
                    "type": "String"
                },
                {
                    "name": "retire",
                    "description": "- Should the token be retired or activated.",
                    "type": "Boolean"
                }
            ],
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 292,
            "description": "Requests new password for a given user",
            "itemtype": "method",
            "name": "requestNewPassword",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n email: string,\n merchantUuid: string\n brandingId?: number\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .requestNewPassword({\n     email: \"test32@test.com\",\n     merchantUuid: \"528b1b80-5868-4abc-a9b6-4d3455d719c8\",\n     brandingId: 12345,\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 331,
            "description": "Sets new password for the user",
            "itemtype": "method",
            "name": "setNewPassword",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n password: string\n passwordConfirmation: string\n brandingId?: number\n}",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "- The reset token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .setNewPassword({\n     password: \"password\",\n     passwordConfirmation: \"password\",\n     brandingId: \"12345\",\n    }, 'afhqi83rji74hjf7e43df')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 369,
            "description": "Gets the account information for a given auth token",
            "itemtype": "method",
            "name": "getAccount",
            "async": 1,
            "example": [
                "\n    InPlayer.Account\n    .getAccount()\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 400,
            "description": "Gets the social login urls for fb/twitter/google",
            "itemtype": "method",
            "name": "getSocialLoginUrls",
            "async": 1,
            "params": [
                {
                    "name": "state",
                    "description": "- Social login state.\nThe state needs to be json and base64 encoded to be sent as a query parameter.\nExample: btoa(JSON.stringify({uuid: 'foo', redirect: 'http://example.com'}))",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .getSocialLoginUrls('123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 421,
            "description": "Updates the account info. Metadata fields must be from the Inplayer.getRegisterFields()",
            "itemtype": "method",
            "name": "updateAccount",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- The new data for the account",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .updateAccount({fullName: 'test test', metadata: {country: 'Germany'}})\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 463,
            "description": "Changes password for a given user",
            "itemtype": "method",
            "name": "changePassword",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n oldPassword: string\n password: string\n passwordConfirmation: string\n brandingId?: number\n}",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "- The reset token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .changePassword({\n      oldPassword: 'old123',\n      password: 'test123',\n      passwordConfirmation: 'test123'\n      brandingId: 1234\n    },'123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 515,
            "description": "Gets register fields",
            "itemtype": "method",
            "name": "getRegisterFields",
            "async": 1,
            "params": [
                {
                    "name": "merchantUuid",
                    "description": "- The merchant UUID",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .getRegisterFields('123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 536,
            "description": "Deletes an account",
            "itemtype": "method",
            "name": "deleteAccount",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n password: string,\n brandingId?: number,\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account.deleteAccount({\n     password: \"password\",\n     brandingId: 1234,\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Account.js",
            "line": 587,
            "description": "DExports account data to the users' email",
            "itemtype": "method",
            "name": "exportData",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n password: string,\n brandingId?: number,\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account.exportData({\n       password: \"password\",\n       brandingId: 1234,\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 16,
            "description": "Checks whether a given authenticated user has access for an asset",
            "itemtype": "method",
            "name": "checkAccessForAsset",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "- The id of the asset",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Asset.checkAccessForAsset(42597)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 46,
            "description": "Checks whether Free trial has been used for a given asset",
            "itemtype": "method",
            "name": "isFreeTrialUsed",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "- The ID of the asset",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .isFreeTrialUsed(36320)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 78,
            "description": "Get the asset info for a given asset ID and merchant UUID",
            "itemtype": "method",
            "name": "getAsset",
            "async": 1,
            "params": [
                {
                    "name": "assetId",
                    "description": "- The ID of the asset",
                    "type": "Number"
                },
                {
                    "name": "merchantUuid",
                    "description": "- The merchant UUID string",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .getAsset(2,'a1f13-dd1dfh-rfh123-dhd1hd-fahh1dl')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 100,
            "description": "Get an external assets info",
            "itemtype": "method",
            "name": "getExternalAsset",
            "async": 1,
            "params": [
                {
                    "name": "assetType",
                    "description": "- The type ID of the asset",
                    "type": "String"
                },
                {
                    "name": "externalId",
                    "description": "- The ID of the external asset",
                    "type": "String"
                },
                {
                    "name": "merchantUuid",
                    "description": "- OPTIONAL - the merchant uuid",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .getExternalAsset('ooyala','44237')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 123,
            "description": "Get package info for a given Package ID",
            "itemtype": "method",
            "name": "getPackage",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "- The type ID of the package",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .getPackage(4444)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 142,
            "description": "Get the access fees for a given asset ID",
            "itemtype": "method",
            "name": "getAssetAccessFees",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "- The ID of the asset",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .getAssetAccessFees(555)\n    .then(data => console.log(data))"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 161,
            "description": "Returns purchase history with types",
            "itemtype": "method",
            "name": "getAssetsHistory",
            "async": 1,
            "params": [
                {
                    "name": "size",
                    "description": "- The page size",
                    "type": "Number"
                },
                {
                    "name": "page",
                    "description": "- The current page / starting index = 0",
                    "type": "Number"
                },
                {
                    "name": "startDate",
                    "description": "- Staring date filter",
                    "type": "String"
                },
                {
                    "name": "endDate",
                    "description": "- Ending date filter",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .getAssetsHistory()\n    .then(data => console.log(data))"
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 204,
            "description": "Authorize for the freemium asset (login)",
            "itemtype": "method",
            "name": "getFreemiumAsset",
            "async": 1,
            "params": [
                {
                    "name": "accessFee",
                    "description": ""
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .getFreemiumAsset(2233)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 240,
            "description": "Get access with code for code access grant asset.",
            "itemtype": "method",
            "name": "requestCodeAccess",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "= {\n assetId: {number},\n code: {string}\n}",
                    "type": "Object"
                }
            ],
            "throws": {
                "description": "Will throw an HTTP 401 error if the code is invalid."
            },
            "example": [
                "\n    InPlayer.Asset\n    .requestCodeAccess({ assetId: 42599, code: 'access-code' })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 291,
            "description": "Retrieves the access code and browser fingerprint for the current asset.\nReturns null if no access code is present.",
            "itemtype": "method",
            "name": "getAccessCode",
            "params": [
                {
                    "name": "data",
                    "description": "= {\n assetId: {number},\n code: {string}\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n   const accessCode = InPlayer.Asset.getAccessCode();"
            ],
            "return": {
                "description": "",
                "type": "Object | null"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 315,
            "description": "Releases the access code for the current browser.",
            "itemtype": "method",
            "name": "releaseAccessCode",
            "async": 1,
            "params": [
                {
                    "name": "-",
                    "description": "assetId",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "Will throw an HTTP 400 error if the code is not in use."
            },
            "example": [
                "\n    InPlayer.Asset\n    .releaseAccessCode(42599)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Asset.js",
            "line": 354,
            "description": "Returns a signed Cloudfront URL with the merchant's signature",
            "itemtype": "method",
            "name": "getCloudfrontURL",
            "async": 1,
            "params": [
                {
                    "name": "assetId",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "videoUrl",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .getCloudfrontURL(42599, 'url')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "data = {\n   video_url: {string}\n}",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src/Models/Branding.js",
            "line": 13,
            "description": "Gets branding params for given merchant",
            "itemtype": "method",
            "name": "getBranding",
            "async": 1,
            "params": [
                {
                    "name": "clientId",
                    "description": "- The Client id",
                    "type": "String"
                },
                {
                    "name": "brandingId",
                    "description": "- The branding id or 'default'",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Branding\n    .getBranding('eyJ0e-XAiOi-JKPEC-ENR5Y', '123')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Branding"
        },
        {
            "file": "src/Models/Dlc.js",
            "line": 13,
            "description": "Gets all DLC links",
            "itemtype": "method",
            "name": "getDlcLinks",
            "async": 1,
            "params": [
                {
                    "name": "assetId",
                    "description": "- The id of the asset",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.DLC\n    .getDlcLinks(36320)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DLC"
        },
        {
            "file": "src/Models/Payment.js",
            "line": 13,
            "description": "Get all payment methods for a User",
            "itemtype": "method",
            "name": "getPaymentMethods",
            "async": 1,
            "example": [
                "\n    InPlayer.Payment\n    .getPaymentMethods()\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src/Models/Payment.js",
            "line": 43,
            "description": "Get the payment tools for an aothorization token and payment method ID",
            "itemtype": "method",
            "name": "getPaymentTools",
            "async": 1,
            "params": [
                {
                    "name": "paymentMethodId",
                    "description": "- The Payment Method ID",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Payment\n    .getPaymentTools(2)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src/Models/Payment.js",
            "line": 77,
            "description": "Makes a Payment for a given Authorization token + asset/payment details.\nUse this method ONLY if the assetFee.type is not 'subscription' or 'freemium'. Otherwise\nplease use InPlayer.Subscription.create()",
            "itemtype": "method",
            "name": "create",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Payment data - {\n number: number || string,\n cardName: string,\n expMonth: number,\n expYear: number,\n cvv: number,\n accessFee: number,\n paymentMethod: string,\n referrer: string\n voucherCode?: string\n brandingId?: number\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Payment\n    .create({\n      number: 4111111111111111,\n      cardName: 'PayPal',\n      expMonth: 10,\n      expYear: 2030,\n      cvv: 656,\n      accessFee: 2341,\n      paymentMethod: 1,\n      referrer: 'http://google.com',\n      voucherCode: 'fgh1982gff-0f2grfds'\n      brandingId: 1234\n     })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src/Models/Payment.js",
            "line": 151,
            "description": "Gets parameters for PayPal",
            "itemtype": "method",
            "name": "getPayPalParams",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains details - {\n origin: {string},\n accessFeeId: {number},\n paymentMethod: {number}\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Payment\n    .getPayPalParams({\n    origin: location.href,\n    accessFeeId: 34,\n    paymentMethod: 2\n    voucherCode: '1231231'\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src/Models/Payment.js",
            "line": 202,
            "description": "Gets the purchase history",
            "itemtype": "method",
            "name": "getPurchaseHistory",
            "async": 1,
            "params": [
                {
                    "name": "status",
                    "description": "- The status of the purchase - active/inactive",
                    "type": "String"
                },
                {
                    "name": "page",
                    "description": "- The current page",
                    "type": "Number"
                },
                {
                    "name": "limit",
                    "description": "- The number of items per page",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Payment\n    .getPurchaseHistory('active', 0, 5)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src/Models/Subscription.js",
            "line": 13,
            "description": "Gets all subscriptions for a given user",
            "itemtype": "method",
            "name": "getSubscriptions",
            "async": 1,
            "params": [
                {
                    "name": "page",
                    "description": "- The current page",
                    "type": "Number"
                },
                {
                    "name": "limit",
                    "description": "- The number of items per page",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Subscription\n    .getSubscriptions()\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Subscription"
        },
        {
            "file": "src/Models/Subscription.js",
            "line": 48,
            "description": "Get subscription details for a given user by id",
            "itemtype": "method",
            "name": "getSubscription",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "- The subscription id",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Subscription\n    .getSubscription('abcdef')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Subscription"
        },
        {
            "file": "src/Models/Subscription.js",
            "line": 81,
            "description": "Cancels a subscription",
            "itemtype": "method",
            "name": "cancelSubscription",
            "async": 1,
            "params": [
                {
                    "name": "unsubscribeUrl",
                    "description": "- The url for the subscription which is getting unsubscribed",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Subscription\n    .cancelSubscription('abcdef')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Subscription"
        },
        {
            "file": "src/Models/Subscription.js",
            "line": 115,
            "description": "Subscribes to a given asset. Use this method ONLY if the accessFee.type === 'subscription'.\nOtherwise please use InPlayer.Payment.payForAsset()",
            "itemtype": "method",
            "name": "create",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- {\n number: number,\n cardName: string,\n expMonth: number,\n expYear: number,\n cvv: number,\n accessFee: number,\n paymentMethod: string,\n referrer: string\n voucherCode?: string\n brandingId?: number\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Subscription\n    .create({\n       number: 1,\n       cardName: 'Payoneer',\n       expMonth: 11,\n       expYear: 12,\n       cvv: 546,\n       accessFee: 13.4,\n       paymentMethod: 'card',\n       referrer: 'http://localhost:3000',\n       voucherCode: '123123125914i2erjfg'\n       brandingId?: 1234\n       }\n    )\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Subscription"
        },
        {
            "file": "src/Models/Voucher.js",
            "line": 14,
            "description": "Gets the discount for a given code.",
            "itemtype": "method",
            "name": "getDiscount",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- {\n  voucherCode: string,\n  accessFeeId: number\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Voucher\n    .getDiscount({\n       voucherCode: '120fwjhniudh42i7',,\n       accessFeeId: 2\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Voucher"
        },
        {
            "file": "src/index.js",
            "line": 31,
            "itemtype": "property",
            "name": "Account",
            "type": "Account",
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 36,
            "itemtype": "property",
            "name": "Asset",
            "type": "Asset",
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 41,
            "itemtype": "property",
            "name": "Payment",
            "type": "Payment",
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 46,
            "itemtype": "property",
            "name": "Subscription",
            "type": "Subscription",
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 51,
            "itemtype": "property",
            "name": "Voucher",
            "type": "Voucher",
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 56,
            "itemtype": "property",
            "name": "Voucher",
            "type": "Voucher",
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 61,
            "itemtype": "property",
            "name": "Branding",
            "type": "Branding",
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 69,
            "description": "Subscribes to websocket events",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "accountUid",
                    "description": "- The users account UUID",
                    "type": "String"
                },
                {
                    "name": "callbackParams",
                    "description": "- Methods regarding websocket\n{\n onmessage: function,\n onopen: function,\n onclose: function\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.subscribe(\n     'adsasd-d1-cjc1c-1ajaveo',\n     {\n      onMessage: (message) => { let body = JSON.parse(message.body); console.log(body, 'message') },\n      onOpen: (e) => console.log('open'),\n      onClose: (e) => console.log('close', e)\n     }\n   )"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 114,
            "description": "Unsubscribes from the websocket and event listeners",
            "itemtype": "method",
            "name": "unsubscribe",
            "example": [
                "\n    InPlayer.unsubscribe()"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "InPlayer"
        },
        {
            "file": "src/index.js",
            "line": 125,
            "description": "Overrides the default configs",
            "itemtype": "method",
            "name": "setConfig",
            "params": [
                {
                    "name": "config",
                    "description": "'prod', 'develop' or 'sandbox'",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.setConfig('develop');"
            ],
            "class": "InPlayer"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Models/Asset.js:354"
        },
        {
            "message": "Missing item type\nReports the generated SSO token to the SSO domain.",
            "line": " src/Models/Account.js:269"
        }
    ]
}