{
    "project": {
        "name": "InPlayer SDK",
        "url": "https://inplayer-org.github.io/inplayer.js/",
        "version": "0.3.37",
        "description": "A Javascript SDK for Inplayer's RESTful API"
    },
    "files": {
        "src\\Models\\Account.js": {
            "name": "src\\Models\\Account.js",
            "modules": {},
            "classes": {
                "Account": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Models\\Asset.js": {
            "name": "src\\Models\\Asset.js",
            "modules": {},
            "classes": {
                "Asset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Models\\Misc.js": {
            "name": "src\\Models\\Misc.js",
            "modules": {},
            "classes": {
                "Misc": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Models\\Payment.js": {
            "name": "src\\Models\\Payment.js",
            "modules": {},
            "classes": {
                "Payment": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Models\\Subscription.js": {
            "name": "src\\Models\\Subscription.js",
            "modules": {},
            "classes": {
                "Subscription": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Models\\User.js": {
            "name": "src\\Models\\User.js",
            "modules": {},
            "classes": {
                "User": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\index.js": {
            "name": "src\\index.js",
            "modules": {},
            "classes": {
                "InPlayer": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Account": {
            "name": "Account",
            "shortname": "Account",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Models\\Account.js",
            "line": 1,
            "description": "Contains all Requests regarding user/account and authentication"
        },
        "Asset": {
            "name": "Asset",
            "shortname": "Asset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Models\\Asset.js",
            "line": 1,
            "description": "Contains all Requests connected with assets/items"
        },
        "Misc": {
            "name": "Misc",
            "shortname": "Misc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Models\\Misc.js",
            "line": 1,
            "description": "Contains mixed various types of functiosn for dlcs, discounts, branding, etc."
        },
        "Payment": {
            "name": "Payment",
            "shortname": "Payment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Models\\Payment.js",
            "line": 3,
            "description": "Contains all Requests connected with payments"
        },
        "Subscription": {
            "name": "Subscription",
            "shortname": "Subscription",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Models\\Subscription.js",
            "line": 1,
            "description": "Contains all Requests connected with subscriptions"
        },
        "User": {
            "name": "User",
            "shortname": "User",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Models\\User.js",
            "line": 1,
            "description": "Contains all Requests regarding user/account and authentication",
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account'"
        },
        "InPlayer": {
            "name": "InPlayer",
            "shortname": "InPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\index.js",
            "line": 16,
            "description": "Main class. Contains all others methods and websocket subscription"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\Models\\Account.js",
            "line": 11,
            "description": "Signs in the user",
            "itemtype": "method",
            "name": "authenticate",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n email: string,\n password: string,\n clientId: string,\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account.authenticate({\n     email: 'test@test.com',\n     password: 'test123',\n     clientId: '123-123-hf1hd1-12dhd1',\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 56,
            "description": "Signs in the user",
            "itemtype": "method",
            "name": "signIn",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n email: string,\n password: string,\n merchantUuid: string,\n referrer: string,\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account.signIn({\n     email: 'test@test.com',\n     password: 'test123',\n     merchantUuid: '123-123-hf1hd1-12dhd1',\n     referrer: 'http://localhost.com'\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 103,
            "description": "Signs out the user and destroys cookies",
            "itemtype": "method",
            "name": "signOut",
            "async": 1,
            "example": [
                "\n    InPlayer.Account.signOut()\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 131,
            "description": "Signs up/Registers user",
            "itemtype": "method",
            "name": "signUp",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n fullName: string,\n email: string\n password: string,\n passwordConfirmation: string,\n merchantUuid: string,\n type: number\n referrer: string,\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account.signUp({\n     fullName: \"test\",\n     email: \"test32@test.com\",\n     password: \"12345678\",\n     passwordConfirmation: \"12345678\",\n     clientId: \"528b1b80-5868-4abc-a9b6-4d3455d719c8\",\n     type: \"consumer\",\n     referrer: \"http://localhost:3000/\",\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 186,
            "description": "Checks if the user is authenticated OAuth2",
            "itemtype": "method",
            "name": "isAuthenticated",
            "example": [
                "\n   InPlayer.Account.isAuthenticated()"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 208,
            "description": "Checks if user is signed in",
            "itemtype": "method",
            "name": "isSignedIn",
            "example": [
                "\n   InPlayer.Account\n   .isSignedIn()"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 224,
            "itemtype": "method",
            "name": "getToken",
            "example": [
                "\nInPlayer.Account.getToken()"
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 245,
            "description": "Returns users Auth token",
            "itemtype": "method",
            "name": "token",
            "async": 1,
            "example": [
                "\n    InPlayer.Account\n    .token()"
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 258,
            "description": "Refreshes the token",
            "itemtype": "method",
            "name": "refreshToken",
            "async": 1,
            "params": [
                {
                    "name": "clientId",
                    "description": "- The merchant's clientId"
                }
            ],
            "example": [
                "\n    InPlayer.Account.refreshToken('123123121-d1-t1-1ff').then(data => console.log(data))"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 299,
            "description": "Sets Auth token into cookies",
            "itemtype": "method",
            "name": "token",
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token which needs to be set",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .setTokenInCookie('aed1g284i3dnfrfnd1o23rtegk')"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 312,
            "description": "Requests new password for a given user",
            "itemtype": "method",
            "name": "requestNewPassword",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n email: String,\n merchantUuid: string\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .requestNewPassword({\n     email: \"test32@test.com\",\n     merchantUuid: \"528b1b80-5868-4abc-a9b6-4d3455d719c8\",\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 343,
            "description": "Sets new password for the user",
            "itemtype": "method",
            "name": "setNewPassword",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n password: string\n passwordConfirmation: string\n}",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "- The reset token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .setNewPassword({\n     password: \"12345\",\n     passwordConfirmation: \"12345\",\n    }, 'afhqi83rji74hjf7e43df')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 375,
            "description": "Gets the user/account information for a given auth token",
            "itemtype": "method",
            "name": "getAccountInfo",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .getAccountInfo('afhqi83rji74hjf7e43df')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 398,
            "description": "Gets the social login urls for fb/twitter/google",
            "itemtype": "method",
            "name": "getSocialLoginUrls",
            "async": 1,
            "params": [
                {
                    "name": "state",
                    "description": "- The state for the social",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .getSocialLoginUrls('123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 417,
            "description": "Updates the account info. Metadata fields must be from the Inplayer.getRegisterFields()",
            "itemtype": "method",
            "name": "updateAccount",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- The new data for the account",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .updateAccount({fullName: 'test test', metadata: {country: 'Germany'}},'123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 460,
            "description": "Changes password for a given user",
            "itemtype": "method",
            "name": "changePassword",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- Contains new password",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .changePassword({\n      oldPassword: 'old123',\n      password: 'test123',\n      passwordConfirmation: 'test123'\n    },'123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 493,
            "description": "Gets register fields",
            "itemtype": "method",
            "name": "getRegisterFields",
            "async": 1,
            "params": [
                {
                    "name": "merchantUuid",
                    "description": "- The merchant UUID",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .getRegisterFields('123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 512,
            "description": "Gets the purchase history",
            "itemtype": "method",
            "name": "getPurchaseHistory",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "- The status of the purchase - active/inactive",
                    "type": "String"
                },
                {
                    "name": "page",
                    "description": "- The current page",
                    "type": "Number"
                },
                {
                    "name": "limit",
                    "description": "- The number of items per page",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .getPurchaseHistory('fg1h213f8g9fefgud23fg','active', 0, 5)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Account.js",
            "line": 540,
            "description": "Returns purchase history with types",
            "itemtype": "method",
            "name": "getAssetsHistory",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Account\n    .getAssetsHistory('1dfh1f-1g1f2e-1gg')\n    .then(data => console.log(data))"
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Account"
        },
        {
            "file": "src\\Models\\Asset.js",
            "line": 10,
            "description": "Checks whether a given authenticated user has access for an asset",
            "itemtype": "method",
            "name": "checkAccessForAsset",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "- The id of the asset",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .checkAccessForAsset('eyJ0eXAiOiJKPECENR5Y',36320)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src\\Models\\Asset.js",
            "line": 32,
            "description": "Get the asset info for a given asset ID and merchant UUID",
            "itemtype": "method",
            "name": "findAsset",
            "async": 1,
            "params": [
                {
                    "name": "assetId",
                    "description": "- The ID of the asset",
                    "type": "Number"
                },
                {
                    "name": "merchantUuid",
                    "description": "- The merchant UUID string",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .findAsset(2,'a1f13-dd1dfh-rfh123-dhd1hd-fahh1dl')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src\\Models\\Asset.js",
            "line": 55,
            "description": "Get an external assets' info",
            "itemtype": "method",
            "name": "findExternalAsset",
            "async": 1,
            "params": [
                {
                    "name": "assetType",
                    "description": "- The type ID of the asset",
                    "type": "String"
                },
                {
                    "name": "externalId",
                    "description": "- The ID of the external asset",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .findExternalAsset('331ff2','44237')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src\\Models\\Asset.js",
            "line": 78,
            "description": "Get package info for a given Package ID",
            "itemtype": "method",
            "name": "findPackage",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "- The type ID of the package",
                    "type": "Numer"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .findPackage(4444)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src\\Models\\Asset.js",
            "line": 97,
            "description": "Get the access fees for a given asset ID",
            "itemtype": "method",
            "name": "getAssetAccessFees",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "- The ID of the asset",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .getAssetAccessFees(555)\n    .then(data => console.log(data))"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src\\Models\\Asset.js",
            "line": 118,
            "description": "Authorize for the freemium asset (login)",
            "itemtype": "method",
            "name": "getFreemiumAsset",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                },
                {
                    "name": "accessFee",
                    "description": ""
                }
            ],
            "example": [
                "\n    InPlayer.Asset\n    .freemiumAsset('uoifhadafefbad1312nfuqd123', { accessFee: 22 })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Asset"
        },
        {
            "file": "src\\Models\\Misc.js",
            "line": 10,
            "description": "Gets all DLC links",
            "itemtype": "method",
            "name": "getDlcLinks",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "assetId",
                    "description": "- The id of the asset",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Misc\n    .getDlcLinks('eyJ0eXAiOiJKPECENR5Y',36320)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Misc"
        },
        {
            "file": "src\\Models\\Misc.js",
            "line": 32,
            "description": "Gets the discount for a given ..",
            "itemtype": "method",
            "name": "getDiscount",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "- {\n  voucherCode: String,\n  merchantUuid: String,\n  accessFeeId: Number\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Misc\n    .getDiscount('eyJ0eXAiOiJKPECENR5Y',{\n       voucherCode: '120fwjhniudh42i7',\n       merchantUuid: 'hghfqw92dm29-1g',\n       accessFeeId: 2\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Misc"
        },
        {
            "file": "src\\Models\\Misc.js",
            "line": 69,
            "description": "Gets branding for given merchant",
            "itemtype": "method",
            "name": "getBranding",
            "async": 1,
            "params": [
                {
                    "name": "merchantUuid",
                    "description": "- The UUID of the merchant",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Misc\n    .getBranding('eyJ0e-XAiOi-JKPEC-ENR5Y')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Misc"
        },
        {
            "file": "src\\Models\\Misc.js",
            "line": 91,
            "description": "Downloads a file",
            "itemtype": "method",
            "name": "downloadProtectedFile",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "assetId",
                    "description": "- The Id of the asset",
                    "type": "Number"
                },
                {
                    "name": "filename",
                    "description": "- The name of the file",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Misc\n    .downloadProtectedFile('eyJ0eXAiOiJKPECENR5Y',2234, 'test.js')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Misc"
        },
        {
            "file": "src\\Models\\Payment.js",
            "line": 12,
            "description": "Get all payment methods for a User",
            "itemtype": "method",
            "name": "getPaymentMethods",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Autorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Payment\n    .getPaymentMethods('aehfawfeikuehdjkc482rijfg47idqwk3n4')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src\\Models\\Payment.js",
            "line": 33,
            "description": "Get the payment tools for an aothorization token and payment method ID",
            "itemtype": "method",
            "name": "getPaymentTools",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "paymentMethodId",
                    "description": "- The Payment Method ID",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.Payment\n    .getPaymentTools('dajh8ao8djadd2o8jh2ofkhdhqkgog3oj', 2)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src\\Models\\Payment.js",
            "line": 58,
            "description": "Makes a Payment for a given Authorization token + asset/payment details.\nUse this method ONLY if the assetFee.type is not 'subscription' or 'freemium'. Otherwise\nplease use InPlayer.Subscription.assetSubscribe()",
            "itemtype": "method",
            "name": "payForAsset",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "- Payment data - {\n number: Number || String,\n cardName: String,\n expMonth: Number,\n expYear: Number,\n cvv: Number,\n accessFee: Number,\n paymentMethod: String,\n referrer: String\n voucherCode?: String\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    // data.payment_method = { id.... }\n    InPlayer.Payment\n    .payForAsset('dajh8ao8djadd2o8jh2ofkhdhqkgog3oj',\n     {\n      number: 4111111111111111,\n      cardName: 'PayPal',\n      expMonth: 10,\n      expYear: 2030,\n      cvv: 656,\n      accessFee: 2341,\n      paymentMethod: 1,\n      referrer: 'http://google.com',\n      voucherCode: 'fgh1982gff-0f2grfds'\n     })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src\\Models\\Payment.js",
            "line": 120,
            "description": "Makes a payment with a given access fee object, for both subscription and PPV",
            "itemtype": "method",
            "name": "purchaseAsset",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "accessFee",
                    "description": "- The access fee object",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "- Payment data - {\n number: Number || String,\n cardName: String,\n expMonth: Number,\n expYear: Number,\n cvv: Number,\n accessFee: Number,\n paymentMethod: String,\n referrer: String\n voucherCode?: String\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Payment\n    .purchaseAsset('dajh8ao8djadd2o8jh2ofkhdhqkgog3oj',\n     {\n       access_fee: {\n         id: 10,\n         name: 'subscription',\n         quantity: 10,\n       },\n       amount: 6.99,\n       id: 2221\n     },\n     {\n      number: 4111111111111111,\n      cardName: 'PayPal',\n      expMonth: 10,\n      expYear: 2030,\n      cvv: 656,\n      paymentMethod: 1,\n      referrer: 'http://google.com',\n      voucherCode: 'fgh1982gff-0f2grfds'\n     })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src\\Models\\Payment.js",
            "line": 177,
            "description": "Gets parameters for PayPal",
            "itemtype": "method",
            "name": "getPayPalParams",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "- Contains details - {\n origin: {String},\n accessFeeId: {Number},\n paymentMethod: {Number}\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Payment\n    .getPayPalParams('dajh8ao8djadd2o8jh2ofkhdhqkgog3oj', {\n    origin: location.href,\n    accessFeeId: 34,\n    paymentMethod: 2\n    voucherCode: '1231231'\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Payment"
        },
        {
            "file": "src\\Models\\Subscription.js",
            "line": 10,
            "description": "Gets all subscriptions for a given user",
            "itemtype": "method",
            "name": "getSubscriptions",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Subscription\n    .getSubscriptions('eyJ0eXAiOiJKPECENR5Y')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Subscription"
        },
        {
            "file": "src\\Models\\Subscription.js",
            "line": 32,
            "description": "Cancels a subscription",
            "itemtype": "method",
            "name": "cancelSubscription",
            "async": 1,
            "params": [
                {
                    "name": "unsubscribeUrl",
                    "description": "- The url for the subscription which is getting unsubscribed",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.Subscription\n    .cancelSubscription('http://localhost/subscription/1','eyJ0eXAiOiJKPECENR5Y')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Subscription"
        },
        {
            "file": "src\\Models\\Subscription.js",
            "line": 55,
            "description": "Subscribes to a given asset. Use this method ONLY if the accessFee.type === 'subscription'.\nOtherwise please use InPlayer.Payment.payForAsset()",
            "itemtype": "method",
            "name": "assetSubscribe",
            "async": 1,
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "- {\n number: Number,\n cardName: String,\n expMonth: Number,\n expYear: Number,\n cvv: Number,\n accessFee: Number,\n paymentMethod: String,\n referrer: String\n voucherCode?: String\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.Subscription\n    .assetSubscribe('eyJ0eXAiOiJKPECENR5Y', {\n       number: 1,\n       cardName: 'Payoneer',\n       expMonth: 11,\n       expYear: 12,\n       cvv: 546,\n       accessFee: 13.4,\n       paymentMethod: 'card',\n       referrer: 'http://localhost:3000',\n       voucherCode: '123123125914i2erjfg'\n       }\n    )\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Subscription"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 13,
            "description": "Signs in the user",
            "itemtype": "method",
            "name": "signIn",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.signIn()'",
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n email: string,\n password: string,\n merchantUuid: string,\n referrer: string,\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.User.signIn({\n     email: 'test@test.com',\n     password: 'test123',\n     merchantUuid: '123-123-hf1hd1-12dhd1',\n     referrer: 'http://localhost.com'\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 64,
            "description": "Signs out the user and destroys cookies",
            "itemtype": "method",
            "name": "signOut",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.signOut()'",
            "example": [
                "\n    InPlayer.User.signOut()\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 96,
            "description": "Signs up/Registers user",
            "itemtype": "method",
            "name": "signUp",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.signUp()'",
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n fullName: string,\n email: string\n password: string,\n passwordConfirmation: string,\n merchantUuid: string,\n type: number\n referrer: string,\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.User.signUp({\n     fullName: \"test\",\n     email: \"test32@test.com\",\n     password: \"12345678\",\n     passwordConfirmation: \"12345678\",\n     clientId: \"528b1b80-5868-4abc-a9b6-4d3455d719c8\",\n     type: \"consumer\",\n     referrer: \"http://localhost:3000/\",\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 155,
            "description": "Checks if user is signed in",
            "itemtype": "method",
            "name": "isSignedIn",
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.isSignedIn()'",
            "example": [
                "\n   InPlayer.User\n   .isSignedIn()"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 175,
            "description": "Returns users Auth token",
            "itemtype": "method",
            "name": "token",
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.token()'",
            "example": [
                "\n    InPlayer.User\n    .token()"
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 191,
            "description": "Sets Auth token into cookies",
            "itemtype": "method",
            "name": "token",
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.setTokenInCookie()'",
            "params": [
                {
                    "name": "token",
                    "description": "- The Authorization token which needs to be set",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .setTokenInCookie('aed1g284i3dnfrfnd1o23rtegk')"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 208,
            "description": "Requests new password for a given user",
            "itemtype": "method",
            "name": "requestNewPassword",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.requestNewPassword()'",
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n email: String,\n merchantUuid: string\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .requestNewPassword({\n     email: \"test32@test.com\",\n     merchantUuid: \"528b1b80-5868-4abc-a9b6-4d3455d719c8\",\n    })\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 245,
            "description": "Sets new password for the user",
            "itemtype": "method",
            "name": "setNewPassword",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.setNewPassword()'",
            "params": [
                {
                    "name": "data",
                    "description": "- Contains {\n password: string\n passwordConfirmation: string\n}",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "- The reset token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .setNewPassword({\n     password: \"12345\",\n     passwordConfirmation: \"12345\",\n    }, 'afhqi83rji74hjf7e43df')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 283,
            "description": "Gets the user/account information for a given auth token",
            "itemtype": "method",
            "name": "getAccountInfo",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.getAccountInfo()'",
            "params": [
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .getAccountInfo('afhqi83rji74hjf7e43df')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 310,
            "description": "Gets the social login urls for fb/twitter/google",
            "itemtype": "method",
            "name": "getSocialLoginUrls",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.getSOcialLoginUrls()'",
            "params": [
                {
                    "name": "state",
                    "description": "- The state for the social",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .getSocialLoginUrls('123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 335,
            "description": "Updates the account info. Metadata fields must be from the Inplayer.getRegisterFields()",
            "itemtype": "method",
            "name": "updateAccount",
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.updateAccount()'",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "- The new data for the account",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .updateAccount({fullName: 'test test', metadata: {country: 'Germany'}},'123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 384,
            "description": "Changes password for a given user",
            "itemtype": "method",
            "name": "changePassword",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.changePassword()'",
            "params": [
                {
                    "name": "data",
                    "description": "- Contains new password",
                    "type": "Object"
                },
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .changePassword({\n      oldPassword: 'old123',\n      password: 'test123',\n      passwordConfirmation: 'test123'\n    },'123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 423,
            "description": "Gets register fields",
            "itemtype": "method",
            "name": "getRegisterFields",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.getRegisterFields()'",
            "params": [
                {
                    "name": "merchantUuid",
                    "description": "- The merchant UUID",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .getRegisterFields('123124-1r-1r13ur1h1')\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\Models\\User.js",
            "line": 448,
            "description": "Gets the purchase history",
            "itemtype": "method",
            "name": "getPurchaseHistory",
            "async": 1,
            "deprecated": true,
            "deprecationMessage": "Please use 'InPlayer.Account.getPurchaseHistory()'",
            "params": [
                {
                    "name": "token",
                    "description": "- The authorization token",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "- The status of the purchase - active/inactive",
                    "type": "String"
                },
                {
                    "name": "page",
                    "description": "- The current page",
                    "type": "Number"
                },
                {
                    "name": "limit",
                    "description": "- The number of items per page",
                    "type": "Number"
                }
            ],
            "example": [
                "\n    InPlayer.User\n    .getPurchaseHistory('fg1h213f8g9fefgud23fg','active', 0, 5)\n    .then(data => console.log(data));"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "User"
        },
        {
            "file": "src\\index.js",
            "line": 25,
            "itemtype": "property",
            "name": "Account",
            "type": "Account",
            "class": "InPlayer"
        },
        {
            "file": "src\\index.js",
            "line": 30,
            "itemtype": "property",
            "name": "User",
            "type": "User",
            "class": "InPlayer"
        },
        {
            "file": "src\\index.js",
            "line": 35,
            "itemtype": "property",
            "name": "Asset",
            "type": "Asset",
            "class": "InPlayer"
        },
        {
            "file": "src\\index.js",
            "line": 40,
            "itemtype": "property",
            "name": "Payment",
            "type": "Payment",
            "class": "InPlayer"
        },
        {
            "file": "src\\index.js",
            "line": 45,
            "itemtype": "property",
            "name": "Subscription",
            "type": "Subscription",
            "class": "InPlayer"
        },
        {
            "file": "src\\index.js",
            "line": 50,
            "itemtype": "property",
            "name": "Misc",
            "type": "Misc",
            "class": "InPlayer"
        },
        {
            "file": "src\\index.js",
            "line": 58,
            "description": "Subscribes to websocket events",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "accountUid",
                    "description": "- The users account UUID",
                    "type": "String"
                },
                {
                    "name": "callbackParams",
                    "description": "- Methods regarding websocket\n{\n onmessage: function,\n onopen: function,\n onclose: function\n}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    InPlayer.subscribe(\n     'adsasd-d1-cjc1c-1ajaveo',\n     {\n      onmessage: (message) => { let body = JSON.parse(message.body); console.log(body, 'message') },\n      onopen: (e) => console.log('open'),\n      onclose: (e) => console.log('close', e)\n     }\n   )"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "InPlayer"
        },
        {
            "file": "src\\index.js",
            "line": 92,
            "description": "Unsubscribes from the websocket and event listeners",
            "itemtype": "method",
            "name": "unsubscribe",
            "example": [
                "\n    InPlayer.unsubscribe()"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "InPlayer"
        },
        {
            "file": "src\\index.js",
            "line": 103,
            "description": "Overrides the default configs",
            "itemtype": "method",
            "name": "setConfig",
            "params": [
                {
                    "name": "config",
                    "description": "'prod', 'develop' or 'sandobx'",
                    "type": "String"
                }
            ],
            "example": [
                "\n    InPlayer.setConfig('develop');"
            ],
            "class": "InPlayer"
        }
    ],
    "warnings": []
}